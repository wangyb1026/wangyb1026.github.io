<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://localhost:4000</id>
    <title>咸鱼得水</title>
    <updated>2021-08-25T08:15:41.862Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://localhost:4000"/>
    <link rel="self" href="http://localhost:4000/atom.xml"/>
    <subtitle>咸鱼得水，随性分享</subtitle>
    <logo>http://localhost:4000/images/avatar.png</logo>
    <icon>http://localhost:4000/favicon.ico</icon>
    <rights>All rights reserved 2021, 咸鱼得水</rights>
    <entry>
        <title type="html"><![CDATA[接近完美的匹配URL正则]]></title>
        <id>http://localhost:4000/post/jie-jin-wan-mei-de-pi-pei-url-zheng-ze/</id>
        <link href="http://localhost:4000/post/jie-jin-wan-mei-de-pi-pei-url-zheng-ze/">
        </link>
        <updated>2021-08-25T05:29:18.000Z</updated>
        <content type="html"><![CDATA[<p>((http|ftp|https)😕/)?(([a-zA-Z0-9.<em>-]+.[a-zA-Z]{2,6})|([0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}))(:[0-9]{1,4})*(/[a-zA-Z0-9&amp;%</em>./-~-]*)?<br>
参考https://www.cxyzjd.com/article/qq569699973/94636893，略作调整以匹配非http/https开头的网址</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS 正则表达式]]></title>
        <id>http://localhost:4000/post/js-zheng-ze-biao-da-shi/</id>
        <link href="http://localhost:4000/post/js-zheng-ze-biao-da-shi/">
        </link>
        <updated>2021-03-29T03:01:21.000Z</updated>
        <content type="html"><![CDATA[<p>这里仅作为查缺补漏，并不包含所有内容。</p>
<ol>
<li>重复限定符：<br>
<em>：匹配【前一个字符】 0次或多次<br>
const reg = /a</em>/;</li>
</ol>
<p>console.log(reg.test('ba'));      //true<br>
console.log(reg.test('b'));       //true<br>
console.log(reg.test('baaa'));     //true</p>
<p>+：匹配前一个字符 1 次或多次<br>
const reg = /a+/;</p>
<p>console.log(reg.test('ba'));    //true<br>
console.log(reg.test('baaa'));    //true<br>
console.log(reg.test('b'));     //false</p>
<p>?：匹配前一个字符 0 次或 1 次<br>
const reg = /ba?/;</p>
<p>console.log(reg.exec('ba'));      //['ba']<br>
console.log(reg.exec('baaa'));      //['ba']<br>
console.log(reg.exec('b'));     //['b']</p>
<ol start="2">
<li>
<p>(?!X)：正向否定查找，即匹配后面不跟X的字符串，与(?:X)相反。</p>
</li>
<li>
<p>反元字符 （[^x]、\D、\W、\B、\S）<br>
这里[^x]是匹配除x之外的任意字符。</p>
</li>
<li>
<p>匹配方式 贪婪模式、非贪婪模式（限定符后加?）<br>
如/ba*?/</p>
</li>
<li>
<p>扩展<br>
u: Unicode修饰符，加上u后，可以在之前基础上正确识别0xFFFF的Unicode字符；<br>
y: 粘连修饰符，下一次匹配必须和上一次匹配剩余的第一个位置开始；</p>
</li>
<li>
<p>具名组匹配<br>
const RE_DATE = /(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})/;</p>
</li>
</ol>
<p>const matchObj = RE_DATE.exec('1999-12-31');<br>
const year = matchObj.groups.year; // &quot;1999&quot;<br>
const month = matchObj.groups.month; // &quot;12&quot;<br>
const day = matchObj.groups.day; // &quot;31&quot;<br>
“具名组匹配”在圆括号内部，模式的头部添加“问号 + 尖括号 + 组名”（?<year>），然后就可以在exec方法返回结果的groups属性上引用该组名。同时，数字序号（matchObj[1]）依然有效。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自己制作的视频播放组件--myvideo]]></title>
        <id>http://localhost:4000/post/zi-ji-zhi-zuo-de-shi-pin-bo-fang-zu-jian-myvideo/</id>
        <link href="http://localhost:4000/post/zi-ji-zhi-zuo-de-shi-pin-bo-fang-zu-jian-myvideo/">
        </link>
        <updated>2021-03-26T01:30:13.000Z</updated>
        <content type="html"><![CDATA[<p>jQuery + 原生编写的基本功能的播放组件，实现了播放暂停、控制条拖拽、音量拖拽、静音、全屏、自定义标题、自定义播放器大小等功能。<br>
代码采用了jQuery，因此代码没有很简洁、也有很多不足之处，有空后面会优化或者基于Vue重构。<br>
DEMO：<a href="https://wangyb1026.github.io/myvideo/">https://wangyb1026.github.io/myvideo/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[并发模型与事件循环]]></title>
        <id>http://localhost:4000/post/bing-fa-mo-xing-yu-shi-jian-xun-huan/</id>
        <link href="http://localhost:4000/post/bing-fa-mo-xing-yu-shi-jian-xun-huan/">
        </link>
        <updated>2021-03-24T03:40:22.000Z</updated>
        <content type="html"><![CDATA[<p>以下内容参考MDN 关于 JavaScript的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop">并发模型与事件循环</a>的解释。<br>
JavaScript的运行时来按顺序执行当前消息队列中的所有消息。当本次所有消息中的所有执行栈都执行完毕后，运行时将等待新的消息。</p>
<p>一、关键名词：栈、堆、队列<br>
1.栈<br>
栈相当于一个平台，用于处理消息中需要执行的函数。当一个函数调用时，这个函数将作为一个帧被压入栈中，当函数完成调用后，会被弹出栈。<br>
2.堆<br>
堆是内存中的指定区域，JavaScript中将Object对象存放在堆中。<br>
3.队列<br>
每执行一个事件、调用一次函数都会创建一个消息对应的回调函数。在事件循环中，JavaScript运行时会从当前时间点的第一个消息开始执行。当该消息中的函数全部处理完、函数处理时创建的栈帧全部弹出栈中（MDN：函数的处理会一直进行到执行栈再次为空为止），执行下一个消息。<br>
<img src="https://mdn.mozillademos.org/files/17124/The_Javascript_Runtime_Environment_Example.svg" alt="" loading="lazy"></p>
<p>二、事件循环<br>
循环的意思是JavaScript会一直监听消息队列，当发现有消息需要处理时，会开始【同步】处理消息。</p>
<p>三、关键术语<br>
1.执行至完成<br>
MDN: 每一个消息完整地执行后，其它消息才会被执行。这为程序的分析提供了一些优秀的特性，包括：当一个函数执行时，它不会被抢占，只有在它运行完毕之后才会去运行任何其他的代码，才能修改这个函数操作的数据。这与C语言不同，例如，如果函数在线程中运行，它可能在任何位置被终止，然后在另一个线程中运行其他代码。<br>
这个模型的一个缺点在于当一个消息需要太长时间才能处理完毕时，Web应用程序就无法处理与用户的交互，例如点击或滚动。为了缓解这个问题，浏览器一般会弹出一个“这个脚本运行时间过长”的对话框。一个良好的习惯是缩短单个消息处理时间，并在可能的情况下将一个消息裁剪成多个消息。</p>
<p>2.添加消息、零延迟<br>
JavaScript会在一个消息完全处理后，再执行下一个。例如在绑定点击事件时，JavaScript会创建一个消息到队列中，但是如果前一个消息还没有执行完，就会出现点击后，并没有立即执行相应的函数。<br>
MDN中以一个典型的setTimeout()方法举例：<br>
setTimeout()是一个异步方法，因此，它会让后面同步的方法先执行。在消息队列中，setTimeout会等<br>
消息队列中的消息都处理完，才会被处理。</p>
<p>const s = new Date().getSeconds();</p>
<p>setTimeout(function() {<br>
console.log(&quot;Ran after &quot; + (new Date().getSeconds() - s) + &quot; seconds&quot;);<br>
}, 500);</p>
<p>while(true) {<br>
if(new Date().getSeconds() - s &gt;= 2) {<br>
console.log(&quot;Good, looped for 2 seconds&quot;);<br>
break;<br>
}<br>
}<br>
执行结果：<br>
//  Good, looped for 2 seconds<br>
//  Ran after 2 seconds</p>
<p>说明即使setTimeout是在while之前，但因为是异步方法，交由异步线程处理，setTimeout会等本轮事件循环中所有事件处理完成后，在下一轮事件执行。</p>
<p>===================<br>
零延迟：<br>
setTimeout(func(), [time])中的第二个参数是代表延迟时间。但是这个延迟时间并不一定如期实现。<br>
当传入time = 500时，如果消息队列中没有其他消息，setTimeout会正常延迟500ms执行function();<br>
但是由于后面的while插入到了setTimeout之前，则setTimeout必须等待while执行完毕（本轮循环只有while），此时已经超过500ms，function()会在while结束后立即执行。<br>
反之，当time = 0时，setTimeout仍需等待while结束，也就无法实现理想中的立即执行。<br>
setTimeout中的第二个参数，是指消息加入到队列的最小延迟时间，并不是执行到setTimeout就延迟或不延迟。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Promise 同步还是异步？]]></title>
        <id>http://localhost:4000/post/promise-tong-bu-huan-shi-yi-bu/</id>
        <link href="http://localhost:4000/post/promise-tong-bu-huan-shi-yi-bu/">
        </link>
        <updated>2021-03-24T02:14:44.000Z</updated>
        <content type="html"><![CDATA[<p>可以先看一下JavaScript的<a href="/post/bing-fa-mo-xing-yu-shi-jian-xun-huan/">事件循环</a>，对Promise的理解会容易得多。</p>
<p>Promise 其实是个同步的方法，在代码中会按照顺序执行。同时new Promise({})里面有任何方法，都会按顺序执行。并且不受resolve() 和 reject()执行而阻止后续代码执行。除非return resolve()或 return reject()，此时会阻止return后面的代码执行。<br>
Promise.then() 是个异步方法，在Promise跑完后会执行then中的callback。但是then内部的callback是同步的，里面的代码按顺序执行。</p>
<p>一段典型的例子：<br>
setTimeout(function() {<br>
console.log(6);<br>
});<br>
const promise = new Promise((resolve, reject) =&gt; {<br>
console.log(1);<br>
resolve(5);<br>
console.log(2);<br>
}).then(val =&gt; {<br>
console.log(val);<br>
});</p>
<p>promise.then(() =&gt; {<br>
console.log(3);<br>
});</p>
<p>console.log(4);</p>
<p>//  1 2 4 5 3 6</p>
<p>🔥这里用事件循环来理解<br>
这里有3个函数被调用，按照先后次序依次加入到消息队列中。<br>
事件循环开始处理本轮循环的第一个消息：<br>
setTimeout(function() {<br>
console.log(6);<br>
});<br>
由于setTimeout是特殊的异步方法，会移出本轮循环，因此setTimeout会在所有事件结束后再执行。<br>
然后开始处理第二个消息：<br>
new Promise((resolve, reject) =&gt; {<br>
console.log(1);<br>
resolve(5);<br>
console.log(2);<br>
})<br>
resolve()是改变Promise状态的方法，通知then/catch根据状态处理内部函数。该操作是异步的，会将then()放到微任务中处理。继续执行console.log(2)。之后，由于该栈已没有返回值，该消息执行完毕，继续执行下一个消息：<br>
promise.then(() =&gt; {<br>
console.log(3);<br>
});<br>
同样是一个函数调用，但是调用了then()方法，同上，会放到微任务中处理。继续下一个消息：<br>
console.log(4);<br>
此时同步方法消息已处理完毕，异步线程会在得到结果后通知主线程并加入消息队列。<br>
先返回resolve()的结果，<br>
执行第一个then() // 5；<br>
和第二个then() // 3；<br>
本轮事件循环结束。<br>
最后开始下一轮事件循环，执行setTimeout()的结果 // 6。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ECMAScript 数据类型]]></title>
        <id>http://localhost:4000/post/ecmascript-shu-ju-lei-xing/</id>
        <link href="http://localhost:4000/post/ecmascript-shu-ju-lei-xing/">
        </link>
        <updated>2021-03-19T06:02:33.000Z</updated>
        <content type="html"><![CDATA[<p>最新的ECMAScript 标准定义了9种数据类型：<br>
· 原始类型：<br>
1. undefined;<br>
2. Boolean;<br>
3. Number;<br>
4. String;<br>
5. BigInt;<br>
6. Symbol;<br>
· null;<br>
· Object; (包括new Object，new Array，new Map，new Set，new WeakMap，new WeakSet，new Date，和几乎所有通过 new keyword 创建的东西。)<br>
· Function;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[新的博客测试]]></title>
        <id>http://localhost:4000/post/xin-de-bo-ke-ce-shi/</id>
        <link href="http://localhost:4000/post/xin-de-bo-ke-ce-shi/">
        </link>
        <updated>2021-03-19T01:35:14.000Z</updated>
        <content type="html"><![CDATA[<p>哈哈哈，欢迎来到我的新博客！<br>
poweredby Gridea and Github Pages.<br>
记住链接：<a href="http://localhost:4000/post-images/1616117867563.jpg">https://jackwang.dev</a></p>
]]></content>
    </entry>
</feed>